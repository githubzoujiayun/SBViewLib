<?xml version="1.0" encoding="utf-8"?>
<resources>

    <declare-styleable name="Theme">
        <attr name="galleryStyle" format="reference" />
        <attr name="spinnerStyle" format="reference" />
        <attr name="gravity">

            <!-- Push object to the top of its container, not changing its size. -->
            <flag name="top" value="0x30" />
            <!-- Push object to the bottom of its container, not changing its size. -->
            <flag name="bottom" value="0x50" />
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03" />
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05" />
            <!-- Place object in the vertical center of its container, not changing its size. -->
            <flag name="center_vertical" value="0x10" />
            <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill_vertical" value="0x70" />
            <!-- Place object in the horizontal center of its container, not changing its size. -->
            <flag name="center_horizontal" value="0x01" />
            <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
            <flag name="fill_horizontal" value="0x07" />
            <!--
				Place the object in the center of its container in both the vertical
				and horizontal axis, not changing its size.
            -->
            <flag name="center" value="0x11" />
            <!--
				Grow the horizontal and vertical size of the object if needed so it
				completely fills its container.
            -->
            <flag name="fill" value="0x77" />
            <!--
				Additional option that can be set to have the top and/or bottom
				edges of the child clipped to its container's bounds. The clip will
				be based on the vertical gravity: a top gravity will clip the bottom
				edge, a bottom gravity will clip the top edge, and neither will clip
				both edges.
            -->
            <flag name="clip_vertical" value="0x80" />
            <!--
				Additional option that can be set to have the left and/or right
				edges of the child clipped to its container's bounds. The clip will
				be based on the horizontal gravity: a left gravity will clip the
				right edge, a right gravity will clip the left edge, and neither
				will clip both edges.
            -->
            <flag name="clip_horizontal" value="0x08" />
        </attr>
        <attr name="entries" format="reference" />
    </declare-styleable>
    <declare-styleable name="ItotemGallery">
        <attr name="gravity" />
        <attr name="animationDuration" format="integer" min="0" />
        <attr name="gspacing" format="dimension" />
        <attr name="unselectedAlpha" format="float" />
    </declare-styleable>
    <declare-styleable name="ItotemAbsSpinner">
        <attr name="entries" />
    </declare-styleable>
    <declare-styleable name="PullToRefresh">

        <!-- A drawable to use as the background of the Refreshable View -->
        <attr name="ptrRefreshableViewBackground" format="reference|color" />

        <!-- A drawable to use as the background of the Header and Footer Loading Views -->
        <attr name="ptrHeaderBackground" format="reference|color" />

        <!-- Text Color of the Header and Footer Loading Views -->
        <attr name="ptrHeaderTextColor" format="reference|color" />

        <!-- Text Color of the Header and Footer Loading Views Sub Header -->
        <attr name="ptrHeaderSubTextColor" format="reference|color" />

        <!-- Mode of Pull-to-Refresh that should be used -->
        <attr name="ptrMode">
            <flag name="disabled" value="0x0" />
            <flag name="pullFromStart" value="0x1" />
            <flag name="pullFromEnd" value="0x2" />
            <flag name="both" value="0x3" />
            <flag name="manualOnly" value="0x4" />

            <!-- These last two are depreacted -->
            <flag name="pullDownFromTop" value="0x1" />
            <flag name="pullUpFromBottom" value="0x2" />
        </attr>

        <!-- Whether the Indicator overlay(s) should be used -->
        <attr name="ptrShowIndicator" format="reference|boolean" />

        <!-- Drawable to use as Loading Indicator. Changes both Header and Footer. -->
        <attr name="ptrDrawable" format="reference" />

        <!-- Drawable to use as Loading Indicator in the Header View. Overrides value set in ptrDrawable. -->
        <attr name="ptrDrawableStart" format="reference" />

        <!-- Drawable to use as Loading Indicator in the Footer View. Overrides value set in ptrDrawable. -->
        <attr name="ptrDrawableEnd" format="reference" />

        <!-- Whether Android's built-in Over Scroll should be utilised for Pull-to-Refresh. -->
        <attr name="ptrOverScroll" format="reference|boolean" />

        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views -->
        <attr name="ptrHeaderTextAppearance" format="reference" />

        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views Sub Header -->
        <attr name="ptrSubHeaderTextAppearance" format="reference" />

        <!-- Style of Animation should be used displayed when pulling. -->
        <attr name="ptrAnimationStyle">
            <flag name="rotate" value="0x0" />
            <flag name="flip" value="0x1" />
        </attr>

        <!-- Whether the user can scroll while the View is Refreshing -->
        <attr name="ptrScrollingWhileRefreshingEnabled" format="reference|boolean" />

        <!--
        	Whether PullToRefreshListView has it's extras enabled. This allows the user to be 
        	able to scroll while refreshing, and behaves better. It acheives this by adding
        	Header and/or Footer Views to the ListView.
        -->
        <attr name="ptrListViewExtrasEnabled" format="reference|boolean" />

        <!--
        	Whether the Drawable should be continually rotated as you pull. This only
        	takes effect when using the 'Rotate' Animation Style.
        -->
        <attr name="ptrRotateDrawableWhilePulling" format="reference|boolean" />

        <!-- BELOW HERE ARE DEPRECEATED. DO NOT USE. -->
        <attr name="ptrAdapterViewBackground" format="reference|color" />
        <attr name="ptrDrawableTop" format="reference" />
        <attr name="ptrDrawableBottom" format="reference" />
    </declare-styleable>
    <declare-styleable name="calendar_cell">
        <attr name="state_selectable" format="boolean" />
        <attr name="state_current_month" format="boolean" />
        <attr name="state_today" format="boolean" />
        <attr name="state_range_first" format="boolean" />
        <attr name="state_range_middle" format="boolean" />
        <attr name="state_range_last" format="boolean" />
    </declare-styleable>
<attr name="fl_theme" format="reference" />

    <attr name="fl_fontFamily" format="string" />
    <attr name="fl_fontWeight" format="string" />
    <attr name="fl_fontExtension" format="string" />
    <attr name="fl_textAppearance" format="integer">
        <enum name="fl_none" value="0" />
        <enum name="fl_dark" value="1" />
        <enum name="fl_light" value="2" />
    </attr>

    <attr name="fl_cornerRadius" format="dimension" />
    <attr name="fl_borderWidth" format="dimension" />
    <attr name="fl_size" format="dimension" />

    <attr name="fl_touchEffect" format="integer">
        <enum name="fl_none" value="0" />
        <enum name="fl_ease" value="1" />
        <enum name="fl_ripple" value="2" />
    </attr>

    <attr name="fl_dotMargin" format="dimension" />

    <!-- FlatButton -->
    <declare-styleable name="fl_FlatButton">
        <attr name="fl_theme" />
        <attr name="fl_fontFamily" />
        <attr name="fl_fontWeight" />
        <attr name="fl_fontExtension" />
        <attr name="fl_textAppearance" />
        <attr name="fl_cornerRadius" />
        <attr name="fl_touchEffect" />

        <!-- Defines the height of the border bottom of the button -->
        <attr name="fl_blockButtonEffectHeight" format="dimension" />
    </declare-styleable>

    <!-- Flat Check Box -->
    <declare-styleable name="fl_FlatCheckBox">
        <attr name="fl_theme" />
        <attr name="fl_fontFamily" />
        <attr name="fl_fontWeight" />
        <attr name="fl_fontExtension" />
        <attr name="fl_cornerRadius" />
        <attr name="fl_size" />
        <attr name="fl_dotMargin" />
    </declare-styleable>

    <!-- Flat Edit Text -->
    <declare-styleable name="fl_FlatEditText">
        <attr name="fl_theme" />
        <attr name="fl_fontFamily" />
        <attr name="fl_fontWeight" />
        <attr name="fl_fontExtension" />
        <attr name="fl_textAppearance" />
        <attr name="fl_cornerRadius" />
        <attr name="fl_borderWidth" />
        <attr name="fl_fieldStyle" format="integer">
            <enum name="fl_flat" value="0" />
            <enum name="fl_box" value="1" />
            <enum name="fl_transparent" value="2" />
        </attr>
    </declare-styleable>

    <!-- Flat AutoCompleteTextView Text -->
    <declare-styleable name="fl_FlatAutoCompleteTextView">
        <attr name="fl_theme" />
        <attr name="fl_fontFamily" />
        <attr name="fl_fontWeight" />
        <attr name="fl_fontExtension" />
        <attr name="fl_textAppearance" />
        <attr name="fl_cornerRadius" />
        <attr name="fl_borderWidth" />
        <attr name="fl_autoFieldStyle" format="integer">
            <enum name="flat" value="0" />
            <enum name="box" value="1" />
            <enum name="transparent" value="2" />
        </attr>
    </declare-styleable>

    <!-- Flat Radio Button -->
    <declare-styleable name="fl_FlatRadioButton">
        <attr name="fl_theme" />
        <attr name="fl_fontFamily" />
        <attr name="fl_fontWeight" />
        <attr name="fl_fontExtension" />
        <attr name="fl_borderWidth" />
        <attr name="fl_size" />
        <attr name="fl_dotMargin" />
    </declare-styleable>

    <!-- Flat Seek Bar -->
    <declare-styleable name="fl_FlatSeekBar">
        <attr name="fl_theme" />
        <attr name="fl_size" />
    </declare-styleable>

    <!-- Flat Text View -->
    <declare-styleable name="fl_FlatTextView">
        <attr name="fl_theme" />
        <attr name="fl_fontFamily" />
        <attr name="fl_fontWeight" />
        <attr name="fl_fontExtension" />
        <attr name="fl_cornerRadius" />
        <attr name="fl_borderWidth" />
        <attr name="fl_textColor" format="integer">
            <enum name="fl_darker" value="0" />
            <enum name="fl_dark" value="1" />
            <enum name="fl_main" value="2" />
            <enum name="fl_light" value="3" />
        </attr>
        <attr name="fl_backgroundColor" format="integer">
            <enum name="fl_darker" value="0" />
            <enum name="fl_dark" value="1" />
            <enum name="fl_main" value="2" />
            <enum name="fl_light" value="3" />
        </attr>
        <attr name="fl_customBackgroundColor" format="color" />
    </declare-styleable>

    <!-- Flat Toggle Button -->
    <declare-styleable name="fl_FlatToggleButton">
        <attr name="fl_theme" />
        <attr name="fl_cornerRadius" />
        <attr name="fl_space" format="dimension" />
    </declare-styleable>
    
    <declare-styleable name="SwipeFlingAdapterView">
        <attr name="SwipeFlingStyle" format="reference"/>
        <attr name="rotation_degrees" format="float"/>
        <attr name="min_adapter_stack" format="integer"/>
        <attr name="max_visible" format="integer"/>
    </declare-styleable>
</resources>